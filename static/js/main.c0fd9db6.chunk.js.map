{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","contacts.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","contacts","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredContacts","filter","contact","toLowerCase","includes","src_SearchBox","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAceA,EAZF,SAACC,GACb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,GAAhC,mBACtBP,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,MACXR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,UCeCC,EApBE,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SAElB,OACCZ,EAAAC,EAAAC,cAAA,WAECU,EAASC,IAAI,SAACC,EAAMC,GACnB,OACCf,EAAAC,EAAAC,cAACc,EAAD,CACCC,IAAKL,EAASG,GAAGR,GACjBA,GAAIK,EAASG,GAAGR,GAChBC,KAAMI,EAASG,GAAGP,KAClBC,MAAOG,EAASG,GAAGN,YCCVS,EAbG,SAAAP,GAAmCA,EAAjCQ,YAAiC,IAApBC,EAAoBT,EAApBS,aAChC,OACCpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACAC,UAAU,sCACVkB,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCTAR,EAAW,CACtB,CACEL,GAAI,EACJC,KAAM,cACNgB,SAAU,eACVf,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,eACNgB,SAAU,UACVf,MAAO,kCAET,CACEF,GAAI,EACJC,KAAM,iBACNgB,SAAU,UACVf,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,eACNgB,SAAU,OACVf,MAAO,kCAET,CACEF,GAAI,EACJC,KAAM,cACNgB,SAAU,cACVf,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,sBACNgB,SAAU,gBACVf,MAAO,mCAET,CACEF,GAAI,EACJC,KAAM,eACNgB,SAAU,YACVf,MAAO,8BAET,CACEF,GAAI,EACJC,KAAM,mBACNgB,SAAU,aACVf,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,cACNgB,SAAU,QACVf,MAAO,yBAET,CACEF,GAAI,GACJC,KAAM,WACNgB,SAAU,UACVf,MAAO,yBCzBIgB,qBA3Bd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAODI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAChB,YAAae,EAAME,OAAOC,SAPzCX,EAAKY,MAAQ,CACZ1B,SAAUA,EACVO,YAAa,IAJDO,wEAYN,IAAAa,EAAAV,KACDW,EAAmBX,KAAKS,MAAM1B,SAAS6B,OAAO,SAAAC,GACnD,OAAOA,EAAQlC,KAAKmC,cAAcC,SAASL,EAAKD,MAAMnB,YAAYwB,iBAEnE,OACC3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,YACAH,EAAAC,EAAAC,cAAC2C,EAAD,CAAWzB,aAAcS,KAAKI,iBAC9BjC,EAAAC,EAAAC,cAAC4C,EAAD,CAAUlC,SAAU4B,YArBNO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c0fd9db6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img alt='contact' src={`https://robohash.org/${props.id}?size=150x150`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({contacts}) => {\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\tcontacts.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={contacts[i].id} \r\n\t\t\t\t\t\tid={contacts[i].id} \r\n\t\t\t\t\t\tname={contacts[i].name} \r\n\t\t\t\t\t\temail={contacts[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange } ) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue tc'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search Contacts' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","export const contacts = [\n  {\n    id: 1,\n    name: 'Norrin Radd',\n    username: 'Silversurfer',\n    email: 'shiny.man@theorder.info'\n  },\n  {\n    id: 2,\n    name: 'Adam Warlock',\n    username: 'warlock',\n    email: 'cosmic.level@infinitywatch.net'\n  },\n  {\n    id: 3,\n    name: 'Barbara Gordon',\n    username: 'batgirl',\n    email: 'demons.head@justice.org'\n  },\n  {\n    id: 4,\n    name: 'Bruce Banner',\n    username: 'hulk',\n    email: 'Strongest.avenger@avengers.org'\n  },\n  {\n    id: 5,\n    name: 'Dinah Drake',\n    username: 'blackcanary',\n    email: 'vocalist@justice.org'\n  },\n  {\n    id: 6,\n    name: 'Dr. Stephen Strange',\n    username: 'Doctorstrange',\n    email: 'Sorcerer.supreme@illuminati.net'\n  },\n  {\n    id: 7,\n    name: 'Matt Murdoch',\n    username: 'daredevil',\n    email: 'blind.lawyer@defenders.net'\n  },\n  {\n    id: 8,\n    name: 'Natasha Romanoff',\n    username: 'blackwidow',\n    email: 'hulk.pacifier@shield.com'\n  },\n  {\n    id: 9,\n    name: 'Barry Allen',\n    username: 'Flash',\n    email: 'speedster@justice.org'\n  },\n  {\n    id: 10,\n    name: 'Stan Lee',\n    username: 'Creator',\n    email: 'thelegend@marvel.com'\n  }\n];\n","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport {contacts} from './contacts';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tcontacts: contacts,\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst filteredContacts = this.state.contacts.filter(contact =>{\r\n\t\t\treturn contact.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Contacts</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<CardList contacts={filteredContacts}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}