{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","phone","CardList","_ref","contacts","Fragment","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","App","this","onRequestContacts","_this$props","searchField","onSearchChange","isPending","filteredContacts","filter","contact","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_CardList","Component","connect","state","searchContacts","requestContacts","error","dispatch","event","payload","target","value","fetch","then","respone","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateContacts","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAeeA,EAbF,SAACC,GACb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,GAAhC,mBACtBP,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,MACXR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,OACVT,EAAAC,EAAAC,cAAA,SAAIH,EAAMW,UCeCC,EArBE,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SAElB,OACCb,EAAAC,EAAAC,cAACF,EAAAC,EAAMa,SAAP,KAECD,EAASE,IAAI,SAACC,EAAMC,GACnB,OACCjB,EAAAC,EAAAC,cAACgB,EAAD,CACCC,IAAKN,EAASI,GAAGV,GACjBA,GAAIM,EAASI,GAAGV,GAChBC,KAAMK,EAASI,GAAGT,KAClBC,MAAOI,EAASI,GAAGR,MACnBC,MAAOG,EAASI,GAAGP,YCAVU,EAbG,SAAAR,GAAmCA,EAAjCS,YAAiC,IAApBC,EAAoBV,EAApBU,aAChC,OACCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACAC,UAAU,sCACVoB,KAAK,SACLC,YAAY,cACZC,SAAUH,MCEEI,SARA,SAAC3B,GACf,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbJ,EAAM4B,YCmBJC,qMAEJC,KAAK9B,MAAM+B,qDAGJ,IAAAC,EACsDF,KAAK9B,MAA1DiC,EADDD,EACCC,YAAaC,EADdF,EACcE,eAAgBpB,EAD9BkB,EAC8BlB,SAAUqB,EADxCH,EACwCG,UACzCC,EAAmBtB,EAASuB,OAAO,SAAAC,GACxC,OAAOA,EAAQ7B,KAAK8B,cAAcC,SAASP,EAAYM,iBAExD,OAAOJ,EACNlC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,cAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,YACAH,EAAAC,EAAAC,cAACsC,EAAD,CAAWlB,aAAcW,IACzBjC,EAAAC,EAAAC,cAACuC,EAAD,KACCzC,EAAAC,EAAAC,cAACwC,EAAD,CAAU7B,SAAUsB,aAjBPQ,cAwBHC,cAxCS,SAACC,GACxB,MAAO,CACNb,YAAaa,EAAMC,eAAed,YAClCnB,SAAUgC,EAAME,gBAAgBlC,SAChCqB,UAAWW,EAAME,gBAAgBb,UACjCc,MAAOH,EAAME,gBAAgBC,QAIJ,SAACC,GAC3B,MAAO,CACNhB,eAAgB,SAACiB,GAAD,OAAWD,ECZY,CACrC1B,KCT+B,sBDU/B4B,QDUiDD,EAAME,OAAOC,SAChEvB,kBAAmB,kBAAMmB,ECRU,SAACA,GAClCA,EAAS,CAAE1B,KCZyB,6BDapC+B,MAAM,8CACLC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE1B,KCdW,2BDcqB4B,QAASO,MACjEC,MAAM,SAAAX,GAAK,OAAIC,EAAS,CAAE1B,KCdQ,0BDcuB4B,QAASH,WD+BxDJ,CAA6ChB,GGrCxCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECXAC,EAAqB,CACvBjC,YAAa,IAYXkC,EAAuB,CACzBhC,WAAW,EACXrB,SAAU,GACVmC,MAAO,ICXLmB,EAASC,yBAETC,EAAcC,YAAgB,CAAExB,eDHR,WAAyC,IAAxCD,EAAwC0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCN,EAAoBS,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC5D,OAAOG,EAAOnD,MACV,IFb2B,sBEcvB,OAAOoD,OAAOC,OAAO,GAAG/B,EAAM,CAACb,YAAa0C,EAAOvB,UACvD,QACI,OAAON,ICFmCE,gBDWvB,WAA2C,IAA1CF,EAA0C0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApCL,EAAsBQ,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC/D,OAAOG,EAAOnD,MACV,IFzBgC,2BE0B5B,OAAOoD,OAAOC,OAAO,GAAI/B,EAAO,CAAEX,WAAW,IACjD,IF1BgC,2BE2B5B,OAAOyC,OAAOC,OAAO,GAAI/B,EAAO,CAAChC,SAAU6D,EAAOvB,QAASjB,WAAW,IAC1E,IF3B+B,0BE4B3B,OAAOyC,OAAOC,OAAO,GAAI/B,EAAO,CAACG,MAAO0B,EAAOvB,QAASjB,WAAW,IACvE,QACI,OAAOW,MCnBbgC,EAAQC,YAAYT,EAAaU,YAAgBC,IAAiBb,IAExEc,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAUN,MAAOA,GACb7E,EAAAC,EAAAC,cAACkF,EAAD,OAEFC,SAASC,eAAe,SF6GpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.8f99e84c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img alt='contact' src={`https://robohash.org/${props.id}?size=150x150`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t\t<p>{props.phone}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({contacts}) => {\r\n\t\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\t\t\t{\r\n\t\t\tcontacts.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={contacts[i].id} \r\n\t\t\t\t\t\tid={contacts[i].id} \r\n\t\t\t\t\t\tname={contacts[i].name} \r\n\t\t\t\t\t\temail={contacts[i].email}\r\n\t\t\t\t\t\tphone={contacts[i].phone}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange } ) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue tc'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search Name' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div className='scrollStyle'>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestContacts} from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchContacts.searchField,\r\n\t\tcontacts: state.requestContacts.contacts,\r\n\t\tisPending: state.requestContacts.isPending,\r\n\t\terror: state.requestContacts.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestContacts: () => dispatch(requestContacts())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestContacts();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { searchField, onSearchChange, contacts, isPending } = this.props;\r\n\t\tconst filteredContacts = contacts.filter(contact =>{\r\n\t\t\treturn contact.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1 className='tc'>Loading...</h1> :\r\n\t\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Contacts</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList contacts={filteredContacts}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_CONTACTS_PENDING,\r\n    REQUEST_CONTACTS_SUCCESS,\r\n    REQUEST_CONTACTS_FAILED\r\n} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestContacts = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_CONTACTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(respone => respone.json())\r\n    .then(data => dispatch({ type: REQUEST_CONTACTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_CONTACTS_FAILED, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_CONTACTS_PENDING = 'REQUEST_CONTACTS_PENDING';\r\nexport const REQUEST_CONTACTS_SUCCESS = 'REQUEST_CONTACTS_SUCCESS';\r\nexport const REQUEST_CONTACTS_FAILED = 'REQUEST_CONTACTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_CONTACTS_PENDING,\r\n    REQUEST_CONTACTS_SUCCESS,\r\n    REQUEST_CONTACTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchContacts = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({},state,{searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateContacts = {\r\n    isPending: false,\r\n    contacts: [],\r\n    error: ''\r\n}\r\nexport const requestContacts = (state=initialStateContacts, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_CONTACTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_CONTACTS_SUCCESS:\r\n            return Object.assign({}, state, {contacts: action.payload, isPending: false});\r\n        case REQUEST_CONTACTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchContacts, requestContacts } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchContacts, requestContacts})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App/>\n                </Provider>\n                , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}